/**
 * ClaDS2+ with multipliers and with a constant turnover
 *
 * To run the example use:
 *
 * npm run wppl examples/clads2plus-multiplier-constantturnover.wppl [N] [TREEPATH] [RHO] [NPART]
 *
 * where [N] is the number of iterations, for example 3
 *       [TREEPATH] path to phyjson tree
 *       [RHO] sampling probability
 *       [NPART] number of particles
 *
 */
  
var tree = phyjs.read_phyjson(argv["_"][1])
var rho = argv["_"][2]
var particles = argv["_"][3]

var MAX_DIV = 20
var MAX_LAMBDA = 20
var MIN_LAMBDA = 1e-6

/**
 * Model specification
 */
var model = function()
{
    
    // Test settings to compare with CRBD
    var lambda_0 = 0.2
    var mu_0 = 0.1
    var sigma = 0.0000001
    var alpha =   Math.log(1)
    var shift  = 0.0000001
    var epsilon  = mu_0 / lambda_0
    var multip  = 1
    
    // Settings
    // var lambda_0 = 0.2              //Sample from Gamma dist
    // var mu_0 = 0.1                  //Sample from Gamma dist
    // var sigma = 0.0000001           //Sample from normal-inverse-gamma distribution
    // var alpha =   Math.log(1)       //Sample from normal-inverse-gamma distribution
    // var shift  = 0.001              //Sample from Beta dist OR set to 0.001
    // var epsilon  = mu_0 / lambda_0  //
    // var multip  = 1                 //Starting at 1

    // Simulate conditionally on the tree
    // It returns all variables of interest
    var ret = simClaDS2plus_m_const( tree, lambda_0, lambda_0, alpha, sigma, epsilon, rho, shift, multip )

    // Condition on detection
        var max_M = 10000
        var M = M_clads2plus_m_constGoesUndetected( tree.age, lambda_0, lambda_0, alpha, sigma, epsilon, rho, max_M, shift, multip)
        factor(Math.log(M))
    
    return ret
}


/**
 * Inference
  */
var dist = Infer({method: 'SMC', particles: particles, model: model})
dist.normalizationConstant
