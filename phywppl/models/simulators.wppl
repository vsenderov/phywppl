// element is a string
var checkError = function(treeElement) {
    if (treeElement.includes("ERROR")) {
	return true
    } else return false
}

///////////////////////////////clads2 code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 */
var clads2TreeSimulate = function( startTime, lambda0, logAlpha, sigma, epsilon, rho, max_R  ) {
    var Tree = clads2TreeSim( startTime, lambda0, logAlpha, sigma, epsilon, rho, max_R );
    if (Tree == false) {
        var message = "No survivors."
        fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR_MAX")) {
        var message = "Guards hit. Tree too big."
        fs.write(filename, message)
        return(message)
    } else if (stringTree.includes("ERROR_ZERO")) {
        var message = "Guards hit. Evolution stopped."
        fs.write(filename, message)
	    return(message)
    } else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

/**
 * Simulation function
 */ 
var clads2TreeSim = function( startTime, lambda, logAlpha, sigma, epsilon, rho, max_R ) {
    var mu = epsilon * lambda
    
    // extreme values patch
    if  ( max_R == 0 ) {
        return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
        return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda - mu  > MAX_DIV ) {
        return ["ERROR_MAX_DIV:", startTime]
    }
    if ( lambda == 0.0 || mu == 0.0 ) {
    return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
        return ["ERROR_MAX_TAXA:", startTime]
    } //end extreme values patch

    var t = exponential( {a: lambda + mu } )
    var currentTime = startTime - t
    var internalBranch = t;    // Calculate length of internal branch leading up to event
    if ( currentTime < 0 )  {  // If we have reached the present
        globalStore.n = globalStore.n + 1;       
        if ( flip( rho ) ){
            var Label = "Taxon_" + globalStore.n + ':';           // Survived to present, sampled. Start tree: Set random label to leaf node
            var NewickTree = [Label , startTime] ;                // Make start on tree
            return NewickTree;
        } else {
            return false;                                         // Survived to present, but not sampled. Remove branch.
        }
    }    
    var extinction = flip( mu/(mu+lambda) )
    if ( extinction ) return false;           // Extinct. Remove branch.
    
    // Otherwise: Speciation; first draw values for daughter lineages and then recurse
    var multip1 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter1
    var multip2 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter2
    var lambda1 = lambda * multip1                                // Calculate new lambda for daughter1
    var lambda2 = lambda * multip2                                // Calculate new lambda for daughter2
        
    var leftTree  = clads2TreeSim( currentTime, lambda1, logAlpha, sigma, epsilon, rho, max_R-1 );       // Get back two Newick strings, partial trees
    // Check if the left Tree contains an error condition
    if (leftTree && leftTree.some(checkError)) {
        return leftTree; // return only left tree immediately
    }
    var rightTree = clads2TreeSim( currentTime, lambda2, logAlpha, sigma, epsilon, rho, max_R-1 );      // Get back two Newick strings, partial trees
    if (rightTree && rightTree.some(checkError)) { return rightTree; } // also check right tree for error
    }
    if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
        return false;
    }
    if (rightTree == false) {
        var newBranch = leftTree[1] + internalBranch;       // Add the two branches
        var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
        return NewickTree ;
    }
    if (leftTree  == false ) {
        var newBranch = rightTree[1] + internalBranch;      // Add the two branches
        var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
        return NewickTree ;
    } else {
        var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
        return NewickTree ;
     }
}
////////////////////////////////end clads2 code////////////////////////////////////////////////////////////////////

///////////////////////////////clads1 code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 */
var clads1TreeSimulate = function( startTime, lambda0, logAlpha, sigma, mu, rho, max_R  )
{
    var Tree = clads1TreeSim( startTime, lambda0, logAlpha, sigma, mu, rho, max_R );
    if (Tree == false) {
    var message = "No survivors."
    fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR_MAX")) {
        var message = "Guards hit. Tree too big."
        fs.write(filename, message)
        return(message)
    } else if (stringTree.includes("ERROR_ZERO")) {
        var message = "Guards hit. Evolution stopped."
        fs.write(filename, message)
	    return(message)
    } else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

/**
 * Simulation function
 */
var clads1TreeSim = function( startTime, lambda, logAlpha, sigma, mu, rho, max_R ) {
    // extreme values patch
    if  ( max_R == 0 ) {
        return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
        return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda - mu  > MAX_DIV ) {
        return ["ERROR_MAX_DIV:", startTime]
    }
    if ( lambda == 0.0 || mu == 0.0 ) {
        return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
        return ["ERROR_MAX_TAXA:", startTime]
    } // end extreme values patch

    var t = exponential( {a: lambda + mu } )
    var currentTime = startTime - t
    var internalBranch = t;          // Calculate length of internal branch leading up to event
    if ( currentTime < 0 )  {        // If we have reached the present
        globalStore.n = globalStore.n + 1;
        if ( flip( rho ) ) {
            var Label = "Taxon_" + globalStore.n + ':';           // Survived to present, sampled. Start tree: Set random label to leaf node
            var NewickTree = [Label , startTime] ;                // Make start on tree
            return NewickTree;
        } else {
            return false;                                          // Survived to present, but not sampled. Remove branch.
        }
    }
    
    var extinction = flip( mu/(mu+lambda) )
    if ( extinction ) return false;           //Extinct. Remove branch.
    
    // Otherwise: Speciation; first draw values for daughter lineages and then recurse
    var multip1 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter1
    var multip2 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter2
    var lambda1 = lambda * multip1                                // Calculate new lambda for daughter1
    var lambda2 = lambda * multip2                                // Calculate new lambda for daughter2
        
    var leftTree  = clads1TreeSim( currentTime, lambda1, logAlpha, sigma, mu, rho, max_R-1 );       // Get back two Newick strings, partial trees
    // Check if the left Tree contains an error condition
    if (leftTree && leftTree.some(checkError)) {
        return leftTree; // return only left tree immediately
    }
    
    var rightTree = clads1TreeSim( currentTime, lambda2, logAlpha, sigma, mu, rho, max_R-1 );      // Get back two Newick strings, partial trees
    if (rightTree && rightTree.some(checkError)) { return rightTree; } // also check right tree for error
    if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
        return false;
    }
    if (rightTree == false) {
        var newBranch = leftTree[1] + internalBranch;       // Add the two branches
        var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
        return NewickTree ;
    }
    if (leftTree  == false ) {
        var newBranch = rightTree[1] + internalBranch;      // Add the two branches
        var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
        return NewickTree ;
    } else {
        var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
        return NewickTree ;
    }
}
////////////////////////////////end library code////////////////////////////////////////////////////////////////////

///////////////////////////////clads0 code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 */
var clads0TreeSimulate= function( startTime, lambda0, logAlpha, sigma, rho, max_R  ) {
    var Tree = clads0TreeSim( startTime, lambda0, logAlpha, sigma, rho, max_R  );
    if (Tree == false) {
        var message = "No survivors."
        fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR_MAX")) {
        var message = "Guards hit. Tree too big."
        fs.write(filename, message)
        return(message)
    } else if (stringTree.includes("ERROR_ZERO")) {
        var message = "Guards hit. Evolution stopped."
        fs.write(filename, message)
	    return(message)
    } else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

/**
 * Simulation function
 */ 
var clads0TreeSim = function( startTime, lambda, logAlpha, sigma, rho, max_R  ) {
    // extreme values patch
    if  ( max_R == 0 ) {
        return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
        return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda == 0.0 ) {
        return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
        return ["ERROR_MAX_TAXA:", startTime]
    } // end extreme values patch

    var t = exponential( {a: lambda } )
    var currentTime = startTime - t
    var internalBranch = t;    // Calculate length of internal branch leading up to event
    if ( currentTime < 0 ) {   // If we have reached the present
        globalStore.n = globalStore.n + 1;
        if ( flip( rho ) ) {
            var Label = "Taxon_" + globalStore.n + ':';           // Survived to present, sampled. Start tree: Set random label to leaf node
            var NewickTree = [Label , startTime] ;                // Make start on tree
            return NewickTree;
        } else {
            return false;    //Survived to present, but not sampled. Remove branch.
        }
    } else { // Speciation; first draw values for daughter lineages and then recurse
        var multip1 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter1
        var multip2 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter2
        var lambda1 = lambda * multip1                                   // Calculate new lambda for daughter1
        var lambda2 = lambda * multip2                                   // Calculate new lambda for daughter2
        var leftTree  = clads0TreeSim( currentTime, lambda1, logAlpha, sigma, rho, max_R-1  );       // Get back two Newick strings, partial trees
        if (leftTree && leftTree.some(checkError)) {                                         // Check if the left Tree contains an error condition
            return leftTree; // return only left tree immediately
        }
        var rightTree = clads0TreeSim( currentTime, lambda2, logAlpha, sigma, rho, max_R-1 );      // Get back two Newick strings, partial trees
	if (rightTree && rightTree.some(checkError)) { return rightTree; } // also check right tree for error
        if (leftTree == false && rightTree == false ) {                                            // Both sides are extinct/not sampled
            return false;
        }
        if (rightTree == false) {
                var newBranch = leftTree[1] + internalBranch;       // Add the two branches
                var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
                return NewickTree ;
        }
        if (leftTree  == false ) {
                var newBranch = rightTree[1] + internalBranch;      // Add the two branches
                var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
                return NewickTree ;
        } else {
                var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
                return NewickTree ;
        }
    }
}
////////////////////////////////end clads0 code////////////////////////////////////////////////////////////////////


///////////////////////////////crbd code//////////////////////////////////////////////////////////////
var crbdTreeSimulate = function( startTime, lambda, mu, rho, filename, max_R ) {
    var Tree = crbdTreeSim( startTime, lambda, mu, rho, max_R );
    if (Tree == false) {
        var message = "No survivors."
        fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR_MAX")) {
        var message = "Guards hit. Tree too big."
        fs.write(filename, message)
        return(message)
    } else if (stringTree.includes("ERROR_ZERO")) {
        var message = "Guards hit. Evolution stopped."
        fs.write(filename, message)
	return(message)
    } else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

var crbdTreeSim = function( startTime, lambda, mu, rho, max_R ) {
    // extreme values patch
    if  ( max_R == 0 ) {
	return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
	return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda == 0.0 ) {
	return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
	return ["ERROR_MAX_TAXA:", startTime]
    }
    //end extreme values patch

    
    var t = exponential( {a: lambda + mu} ); //Draw a waiting time
    var currentTime = startTime - t;         //Calculate time of event
    if ( currentTime < 0 ) {                 // If we have reached the present
        globalStore.n = globalStore.n + 1;   // Needed for the node
        if ( flip( rho ) ) {
            var Label = "Taxon_" + globalStore.n + ':';
            var NewickTree = [Label, startTime] ;     // Make start on tree
            return NewickTree;
        }
        else {
            return false;    //Survived to present, but not sampled. Remove branch.
        }
    } else {                                             // Otherwise we have an event
        var internalBranch = startTime - currentTime;    // Calculate length of internal branch leading up to event
        var speciation = flip( lambda/(lambda+mu) ) ;    // Speciation or extinction?
        if ( speciation == true ) {                      // Speciation event
            var leftTree  = crbdTreeSim( currentTime, lambda, mu, rho, max_R - 1 );       // Get back two Newick strings, partial trees
	    if (leftTree && leftTree.some(checkError)) {
              return leftTree;  // return only left tree immediately
            }
            var rightTree = crbdTreeSim( currentTime, lambda, mu, rho, max_R - 1 );       // Get back two Newick strings, partial trees
	    if (rightTree && rightTree.some(checkError)) { return rightTree; } // also check right tree for error
            if (leftTree == false && rightTree == false ) {                    // Both sides are extinct
                return false;
            }
            if (rightTree == false) {
                var newBranch = leftTree[1] + internalBranch;  // Add the two branches
                var NewickTree = [leftTree[0] , newBranch ] ; //build correct tree without the extinct side
                return NewickTree ;
            }
            if (leftTree  == false ) {
                var newBranch = rightTree[1] + internalBranch;      // Add the two branches
                var NewickTree = [rightTree[0] , newBranch ] ; //build correct tree without the extinct side
                return NewickTree ;
            } else {
                var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
                return NewickTree ;
            }
        } else {                                       // Extinction event
            return false;
        }
    }
}
////////////////////////////////end crbd  code////////////////////////////////////////////////////////////////////


///////////////////////////////library code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 */
var anads2TreeSimulate = function( startTime, lambda0, stepsize, logAlpha, sigma, epsilon, rho, max_R  ) {
    var Tree = anads2TreeSim( startTime, lambda0, stepsize, logAlpha, sigma, epsilon, rho, max_R );
    if (Tree == false) {
	var message = "No survivors."
	fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR_MAX")) {
        var message = "Guards hit. Tree too big."
        fs.write(filename, message)
        return(message)
    } else if (stringTree.includes("ERROR_ZERO")) {
        var message = "Guards hit. Evolution stopped."
        fs.write(filename, message)
	    return(message)
    } else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

/**
 * Simulation function
 */
var anads2TreeSim = function( startTime, lambda, stepsize, logAlpha, sigma, epsilon, rho, max_R ) {
    var mu = epsilon * lambda 
    
    // extreme values patch
    if  ( max_R == 0 ) {
	return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
	return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda - mu  > MAX_DIV ) {
    	return ["ERROR_MAX_DIV:", startTime]
    }
    if ( lambda == 0.0 || mu == 0.0 ) {
	return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
	return ["ERROR_MAX_TAXA:", startTime]
    } // end extreme values patch
    
    var timeToSpeciation = exponential( {a: lambda } )
    var timeToExtinction = exponential( {a: mu } )
    var timeToAnagenesis = stepsize
    
    if (timeToAnagenesis < timeToSpeciation && timeToAnagenesis < timeToExtinction ) {  // Anagenetic event
	var currentTime = startTime - timeToAnagenesis;
	if ( currentTime < 0 ) {                         // Handle reaching present
	    globalStore.n = globalStore.n + 1; 
	    if ( flip( rho ) ) {
		var Label = "Taxon_" + globalStore.n + ':'; 
		var NewickTree = [Label, startTime] ;     // Make start on tree
		return NewickTree;
            } else {
		return false;    //Survived to present, but not sampled. Remove branch.
            }
	}
        var internalBranch = timeToAnagenesis;
        var multip = Math.exp(gaussian( {mu: logAlpha*stepsize, sigma: sigma*Math.sqrt(stepsize)})) // Draw and calc new multiplier
	var lambdaNew = lambda * multip ; 
        var Tree = anads2TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, epsilon, rho, max_R-1 );         // Continue along branch
        if (Tree == false) {             // Extinct/not sampled
            return false;
        }
        else {
            var newBranch = Tree[1] + internalBranch;           // Add the two "final" branches
            var NewickTree = [Tree[0] , newBranch ] ;           // build correct final tree
            return NewickTree;
        }
    } else {    // Speciation/cladogenetic event
	var timeToEvent = Math.min(timeToSpeciation, timeToExtinction);
	var currentTime = startTime - timeToEvent;
	var internalBranch = timeToEvent;     // Calculate length of internal branch leading up to event
	if ( currentTime < 0 ) {              // We have reached the present
	    globalStore.n = globalStore.n + 1;	    	   
            if ( flip( rho ) ){
		var Label = "Taxon_" + globalStore.n + ':';
		var NewickTree = [Label , startTime] ;     // Make start on tree
		return NewickTree;
            } else {
		return false;    //Survived to present, but not sampled. Remove branch.
            }
	}
	if ( timeToExtinction == timeToEvent ) {    // Extinction
            return false;                           // Remove branch
	} else {   // Speciation; first draw values for daughter lineages and then recurse	          
            var delta = timeToSpeciation;                                                           // Anagenetic "update" event at branching point
            var multip = Math.exp(gaussian( {mu: logAlpha*delta, sigma: sigma*Math.sqrt(delta)}))   // Draw and calc new multiplier
            var lambdaNew = lambda * multip;                                                        // Calculate new lambda
	    
            // Speciation/cladogenetic event
	    // Get back two Newick strings, partial trees
            var leftTree  = anads2TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, epsilon, rho, max_R-1 );    
	    if (leftTree && leftTree.some(checkError)) {                                     // Check if the left Tree contains an error condition
		return leftTree;                                                                     // return only left tree immediately
	    }
            var rightTree = anads2TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, epsilon, rho, max_R-1 );
	    if (rightTree && rightTree.some(checkError)) { return rightTree; } // also check right tree for error
            if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
                return false;
            }
            if (rightTree == false) {
                var newBranch = leftTree[1] + internalBranch;       // Add the two branches
                var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
                return NewickTree ;
            }
            if (leftTree  == false ) {
                var newBranch = rightTree[1] + internalBranch;      // Add the two branches
                var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
                return NewickTree ;
            } else {
                var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
                return NewickTree ;
            }
        }
    }
}
////////////////////////////////end library code////////////////////////////////////////////////////////////////////


///////////////////////////////anads-GBM1 code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 */
var anads1TreeSimulate = function( startTime, lambda0, stepsize, logAlpha, sigma, mu, rho, max_R  ) {
    var Tree = anads1TreeSim( startTime, lambda0, stepsize, logAlpha, sigma, mu, rho, max_R  );
    if (Tree == false) {
        var message = "No survivors."
        fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR_MAX")) {
        var message = "Guards hit. Tree too big."
        fs.write(filename, message)
        return(message)
    } else if (stringTree.includes("ERROR_ZERO")) {
        var message = "Guards hit. Evolution stopped."
        fs.write(filename, message)
	    return(message)
    } else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}
 
/**
 * Simulation function
 */
var anads1TreeSim = function( startTime, lambda, stepsize, logAlpha, sigma, mu, rho, max_R  ) {
    // extreme values patch
    if  ( max_R == 0 ) {
    return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
    return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda - mu  > MAX_DIV ) {
        return ["ERROR_MAX_DIV:", startTime]
    }
    if ( lambda == 0.0 || mu == 0.0 ) {
    return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
    return ["ERROR_MAX_TAXA:", startTime]
    }
    //end extreme values patch

    var timeToSpeciation = exponential( {a: lambda } )
    var timeToExtinction = exponential( {a: mu } )
    var timeToAnagenesis = stepsize
    
    if (timeToAnagenesis < timeToSpeciation && timeToAnagenesis < timeToExtinction ) {
        //Anagenetic event
        var currentTime = startTime - timeToAnagenesis;
        
        if ( currentTime < 0 ) {                          // We have reached the present
            globalStore.n = globalStore.n + 1;            // Needed for the node
            if ( flip( rho ) ) {
                var Label = "Taxon_" + globalStore.n + ':';
                var NewickTree = [Label, startTime] ;     // Make start on tree
                return NewickTree;
            } else {
                return false;    //Survived to present, but not sampled. Remove branch.
            }
        }
        
        var internalBranch = timeToAnagenesis;
        var multip = Math.exp(gaussian( {mu: logAlpha*stepsize, sigma: sigma*Math.sqrt(stepsize)}))        // Draw and calc new multiplier
        var lambdaNew = lambda * multip ;                                                                  // Calculate new lambda
        var Tree = anads1TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, mu, rho, max_R-1 );   // Continue along branch
        if (Tree == false ) {                                                                              // Extinct/not sampled
            return false;
        } else {
            var newBranch = Tree[1] + internalBranch;           // Add the two "final" branches
            var NewickTree = [Tree[0] , newBranch ] ;           // build correct final tree
            return NewickTree;
        }
    } else {
        //Speciation/cladogenetic event
        var timeToEvent = Math.min(timeToSpeciation, timeToExtinction);
        var currentTime = startTime - timeToEvent;
        var internalBranch = timeToEvent;    // Calculate length of internal branch leading up to event
        if ( currentTime < 0 ) {             // If we have reached the present
            globalStore.n = globalStore.n + 1;
    
            if ( flip( rho ) ) {
                var Label = "Taxon_" + globalStore.n + ':';           //Survived to present, sampled. Start tree: Set random label to leaf node
                var NewickTree = [Label , startTime] ;                // Make start on tree
                return NewickTree;
            }
            else {
                return false;    //Survived to present, but not sampled. Remove branch.
            }
        }
        if ( timeToExtinction == timeToEvent ) {
            return false;           // Extinct. Remove branch.
        } else {
            // Speciation; first draw values for daughter lineages and then recurse
            // Anagenetic "update" event at branching point
            var delta = timeToSpeciation;
            var multip = Math.exp(gaussian( {mu: logAlpha*delta, sigma: sigma*Math.sqrt(delta)}))            // Draw and calc new multiplier
            var lambdaNew = lambda * multip ;                                                                // Calculate new lambda
        
            //Speciation/cladogenetic event
            var leftTree  = anads1TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, mu, rho, max_R-1 );
        
            // Check if the left Tree contains an error condition
            if (leftTree && leftTree.some(checkError)) {
                return leftTree; // return only left tree immediately
            }
            var rightTree = anads1TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, mu, rho, max_R-1 );
	    if (rightTree && rightTree.some(checkError)) { return rightTree; } // also check right tree for error
            if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
                return false;
            }
            if (rightTree == false) {
                var newBranch = leftTree[1] + internalBranch;       // Add the two branches
                var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
                return NewickTree ;
             }
             if (leftTree  == false ) {
                var newBranch = rightTree[1] + internalBranch;      // Add the two branches
                var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
                return NewickTree ;
             } else {
                var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
                return NewickTree ;
            }
        }
    }  
}

////////////////////////////////end anads-GBM1 code////////////////////////////////////////////////////////////////////


///////////////////////////////anads-GBM0 code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 */
var anads0TreeSimulate= function( startTime, lambda0, stepsize, logAlpha, sigma, rho, max_R ) {
    var Tree = anads0TreeSim( startTime, lambda0, stepsize, logAlpha, sigma, rho, max_R );
    if (Tree == false) {
    var message = "No survivors."
    fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR_MAX")) {
        var message = "Guards hit. Tree too big."
        fs.write(filename, message)
        return(message)
    } else if (stringTree.includes("ERROR_ZERO")) {
        var message = "Guards hit. Evolution stopped."
        fs.write(filename, message)
	return(message)
    } else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

/**
 * Simulation function
 */
var anads0TreeSim = function( startTime, lambda, stepsize, logAlpha, sigma, rho, max_R ) {
    // extreme values patch
    if  ( max_R == 0 ) {
	return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
	return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda == 0.0 ) {
	return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
	return ["ERROR_MAX_TAXA:", startTime]
    }
    //end extreme values patch

    var timeToSpeciation = exponential( {a: lambda } )
    var timeToAnagenesis = stepsize
    
    //Anagenetic event
    if (timeToAnagenesis < timeToSpeciation) {
        var currentTime = startTime - timeToAnagenesis;
        
        if ( currentTime < 0 ) { 
            globalStore.n = globalStore.n + 1; // new taxon
            if ( flip( rho ) ) {
                var Label = "Taxon_" + globalStore.n + ':';
                var NewickTree = [Label, startTime] ;     // Make start on tree
                return NewickTree;
            } else {
                return false;    //Survived to present, but not sampled. Remove branch.
            }
        }
        
        var internalBranch = timeToAnagenesis;
        var multip = Math.exp(gaussian( {mu: logAlpha*stepsize, sigma: sigma*Math.sqrt(stepsize)}))      // Draw and calc new multiplier
        var lambdaNew = lambda * multip ;                                                                // Calculate new lambda
        var Tree = anads0TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, rho, max_R-1 );     // Continue along branch
        if (Tree == false) {  // Extinct/not sampled
          return false;
        } else {
          var newBranch = Tree[1] + internalBranch;           // Add the two "final" branches
          var NewickTree = [Tree[0] , newBranch ] ;           // build correct final tree
          return NewickTree;
        }
    } else {
        //Speciation/cladogenetic event
        var currentTime = startTime - timeToSpeciation;
        var internalBranch = timeToSpeciation;          // Length of internal branch leading up to event
        
        if ( currentTime < 0 ){ 
            globalStore.n = globalStore.n + 1;
            if ( flip( rho ) ) {
                var Label = "Taxon_" + globalStore.n + ':';           //Survived to present, sampled. Start tree: Set random label to leaf node
                var NewickTree = [Label , startTime] ;                // Make start on tree
                return NewickTree;
            }
            else {
                return false;    //Survived to present, but not sampled. Remove branch.
            }
        } else { // Not reached present: Speciation
            //Anagenetic "update" event at branching point
            var delta = timeToSpeciation;
            var multip = Math.exp(gaussian( {mu: logAlpha*delta, sigma: sigma*Math.sqrt(delta)}))         // Draw and calc new multiplier
            var lambdaNew = lambda * multip ;                                                              // Calculate new lambda
            
            //Speciation/cladogenetic event
            var leftTree  = anads0TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, rho, max_R-1 );       // Get back two Newick strings, partial trees
            
            // Check if the left Tree contains an error condition
            if (leftTree && leftTree.some(checkError)) {
              return leftTree;  // return only left tree immediately
            }
            
            var rightTree = anads0TreeSim( currentTime, lambdaNew, stepsize, logAlpha, sigma, rho, max_R-1 );      // Get back two Newick strings, partial trees
	    if (rightTree && rightTree.some(checkError)) { return rightTree; } // also check right tree for error
            if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
                    return false;
            }
            if (rightTree == false) {
                    var newBranch = leftTree[1] + internalBranch;       // Add the two branches
                    var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
                    return NewickTree ;
            }
            if (leftTree == false ) {
                    var newBranch = rightTree[1] + internalBranch;      // Add the two branches
                    var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
                    return NewickTree ;
            } else {
                    var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
                    return NewickTree ;
            }
        }
    }
}
////////////////////////////////end anads-GBM2 code////////////////////////////////////////////////////////////////////
