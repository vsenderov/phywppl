/**
 * Simulation from startTime to the present under ClaDS1, returns observed Tree (without extinctions)
 *
 * To run the simulation use:
 * npm run wppl tree_simulations/treesim-clads1.wppl 1 [OUTPUT_TREE] [RHO] [TREE_AGE]
 *
 * where 1 is the number of iterations (use external loop if needed)
 *       [OUTPUT_FILENAME] path to output file
 *       [RHO] sampling fraction
 *       [TREEAGE] Tree age (we've hijacked the unneeded number of particles)
 *
 */

// Setting variables/priors
var filename = argv["_"][1]
var rho = argv["_"][2]          // "sampling rate" read as a second argument // because this is the default semantics of npm run wppl
var startTime = argv["_"][3]    // tree age !!! Hijacked number of particles !!! TODO fix this

var lambda0 = 0.2
var mu = 0.1                   //var mu =  gamma( {shape: 1, scale: 0.5} )
var sigma = 0.5                //var sigma = Math.sqrt( 1 / gamma( { shape: 3, scale: 1/startTime } ) )
var alpha = 0.95               //var alpha = Math.exp(logAlpha)
var logAlpha = Math.log(alpha) //var logAlpha = gaussian( {mu: 0, sigma: sigma} )

console.log("age = ", startTime)
console.log("lambda0 = ", lambda0)
console.log("mu = ", mu)
console.log("sigma = ", sigma)
console.log("alpha = ", alpha)
console.log("rho = ", rho)
console.log("\n")

// GUARD
var max_R = 100000 // 500*startTime  A guard against very deep recursions
var MAX_LAMBDA = 1e12
var MAX_DIV = 1e12
var MAX_NODES = 100000

globalStore.n = 0; // number of nodes

///////////////////////////////library code//////////////////////////////////////////////////////////////
/**
 * Helper function to check for errors in the tree string
 * @param treeElement is a string 
 * @return boolean
 */
var checkError = function(treeElement) {
    if (treeElement.includes("ERROR")) {
    return true
    } else return false
}

/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 */
var clads1TreeSimulate = function( startTime, lambda0, logAlpha, sigma, mu, rho, max_R  )
{
    var Tree = clads1TreeSim( startTime, lambda0, logAlpha, sigma, mu, rho, max_R );
    if (Tree == false) {
    var message = "No survivors."
    fs.write(filename, message)
        return(message)
    }
    var stringTree = Tree.join("")
    if (stringTree.includes("ERROR")) {
        var message = "Guards hit. " + stringTree
        fs.write(filename, message)
        return(message)
    }
    else {
        var Tree = "(" + stringTree + ")" + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

/**
 * Simulation function
 */
var clads1TreeSim = function( startTime, lambda, logAlpha, sigma, mu, rho, max_R ) {
    // extreme values patch
    if  ( max_R == 0 ) {
        return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
        return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda - mu  > MAX_DIV ) {
        return ["ERROR_MAX_DIV:", startTime]
    }
    if ( lambda == 0.0 || mu == 0.0 ) {
        return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
        return ["ERROR_MAX_TAXA:", startTime]
    } // end extreme values patch

    var t = exponential( {a: lambda + mu } )
    var currentTime = startTime - t
    var internalBranch = t;          // Calculate length of internal branch leading up to event
    if ( currentTime < 0 )  {        // If we have reached the present
        globalStore.n = globalStore.n + 1;
        if ( flip( rho ) ) {
            var Label = "Taxon_" + globalStore.n + ':';           // Survived to present, sampled. Start tree: Set random label to leaf node
            var NewickTree = [Label , startTime] ;                // Make start on tree
            return NewickTree;
        } else {
            return false;                                          // Survived to present, but not sampled. Remove branch.
        }
    }
    
    var extinction = flip( mu/(mu+lambda) )
    if ( extinction ) return false;           //Extinct. Remove branch.
    
    // Otherwise: Speciation; first draw values for daughter lineages and then recurse
    var multip1 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter1
    var multip2 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter2
    var lambda1 = lambda * multip1                                // Calculate new lambda for daughter1
    var lambda2 = lambda * multip2                                // Calculate new lambda for daughter2
        
    var leftTree  = clads1TreeSim( currentTime, lambda1, logAlpha, sigma, mu, rho, max_R-1 );       // Get back two Newick strings, partial trees
    // Check if the left Tree contains an error condition
    if (leftTree == true && leftTree.some(checkError)) {
        return leftTree; // return only left tree immediately
    }
    
    var rightTree = clads1TreeSim( currentTime, lambda2, logAlpha, sigma, mu, rho, max_R-1 );      // Get back two Newick strings, partial trees
        
    if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
        return false;
    }
    if (rightTree == false) {
        var newBranch = leftTree[1] + internalBranch;       // Add the two branches
        var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
        return NewickTree ;
    }
    if (leftTree  == false ) {
        var newBranch = rightTree[1] + internalBranch;      // Add the two branches
        var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
        return NewickTree ;
    } else {
        var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
        return NewickTree ;
    }
}
////////////////////////////////end library code////////////////////////////////////////////////////////////////////

var message = "Error: MEMORY"
fs.write(filename, message)
clads1TreeSimulate( startTime, lambda0, logAlpha, sigma, mu, rho, max_R  )
