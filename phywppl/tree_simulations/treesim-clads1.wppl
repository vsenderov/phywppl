/**
 * Simulation from startTime to the present under ClaDS1, returns observed Tree (without extinctions)
 *
 * To run the simulation use:
 * npm run wppl tree_simulations/treesim-clads1.wppl 1 [INPUT_DIR] [OUTPUT_FILE] 
 *
 */

// Setting parameters/priors
var dirname = argv["_"][1] // dirname is now the directory where the sims are stored
var filename = argv["_"][2] // "sampling rate" read as a second argument because this is the default semantics of npm run wppl                       

// Number of Taxa Globally (side-effect)
globalStore.n = 0;

/* Helper function to check for errors in the tree 
 * @param tree is a [String], i.e. tree
 * @return Boolean
 */
var checkError = function (tree) {
  var stringTree = tree.join("")
  if (stringTree.includes("ERROR")) {
    return true
  } else
    return false
}

/* Helper function to read in data */
var getHyperParamsFromDir = function(dirname) {
    //console.log("Parsing ", dirname)
    return {
        startTime: 10,
	lambda0: 0.2,
  mu: 0.1,
	logAlpha: -0.1,
	sigma: 0.1,
	rho: 0.5,
	stepsize: 0.1,
	max_R: 500,
	MAX_LAMBDA: 1e12,
	MAX_NODES: 100000,
  MAX_DIV: 1e12
    }
}

///////////////////////////////library code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 * Re-starts simulation if either left or right tree fails
 */
 var clads1TreeSimulate = function (dirname) {
    var obj = getHyperParamsFromDir(dirname)
    var startTime = obj.startTime
    var lambda0 = obj.lambda0
    var mu = obj.mu
    var logAlpha = obj.logAlpha
    var sigma = obj.sigma
    var rho = obj.rho
    var stepsize = obj.stepsize
    var max_R = obj.max_R
    var MAX_LAMBDA = obj.MAX_LAMBDA
    var MAX_NODES = obj.MAX_NODES
    var MAX_DIV = obj.MAX_DIV
  
      var TreeLeft = clads1TreeSim(startTime, lambda0, logAlpha, sigma, mu, rho, max_R, MAX_LAMBDA, MAX_NODES, MAX_DIV);
      if (TreeLeft == false )  {
        console.log("Error: No survivors in this subtree") 
        clads1TreeSimulate(dirname)
      }
      else{
        var stringTreeLeft = TreeLeft.join("")
        if ((stringTreeLeft.includes("ERROR_MAX")) || (stringTreeLeft.includes("ERROR_ZERO"))) {
          console.log("Error: Guards hit") 
          clads1TreeSimulate(dirname)
        }
        else{ //So first tree is ok
          var TreeRight = clads1TreeSim(startTime, lambda0, logAlpha, sigma, mu, rho, max_R, MAX_LAMBDA, MAX_NODES, MAX_DIV);
          if (TreeRight == false )  {
            console.log("Error: No survivors in this subtree") 
            clads1TreeSimulate(dirname)
          }
          else {
            var stringTreeRight = TreeRight.join("")
            if ((stringTreeRight.includes("ERROR_MAX")) || (stringTreeRight.includes("ERROR_ZERO"))) {
              console.log("Error: Guards hit") 
              clads1TreeSimulate(dirname)
            }
            else{ //So both the first and second tree is ok. Join trees and output:
              var stringTree = [TreeLeft.join('') + ',' + TreeRight.join('')];
              var Tree = "(" + stringTree + ")" + ';';
              //fs.write(filename, Tree);
              return Tree
            } 
          }
        }
      }
  }

/**
 * Simulation function
 */
var clads1TreeSim = function( startTime, lambda, logAlpha, sigma, mu, rho, max_R, MAX_LAMBDA, MAX_NODES, MAX_DIV ) {
    // extreme values patch
    if  ( max_R == 0 ) {
        return ["ERROR_MAX_RECURSION:", startTime]
    }
    if ( lambda  > MAX_LAMBDA ) {
        return ["ERROR_MAX_LAMBDA:", startTime]
    }
    if ( lambda - mu  > MAX_DIV ) {
        return ["ERROR_MAX_DIV:", startTime]
    }
    if ( lambda == 0.0 || mu == 0.0 ) {
        return ["ERROR_ZERO:", startTime]
    }
    if ( globalStore.n > MAX_NODES ) {
        return ["ERROR_MAX_TAXA:", startTime]
    } // end extreme values patch

    var t = exponential( {a: lambda + mu } )
    var currentTime = startTime - t
    var internalBranch = t;          // Calculate length of internal branch leading up to event
    if ( currentTime < 0 )  {        // If we have reached the present
        globalStore.n = globalStore.n + 1;
        if ( flip( rho ) ) {
            var Label = "Taxon_" + globalStore.n + ':';           // Survived to present, sampled. Start tree: Set random label to leaf node
            var NewickTree = [Label , startTime] ;                // Make start on tree
            return NewickTree;
        } else {
            return false;                                          // Survived to present, but not sampled. Remove branch.
        }
    }
    
    var extinction = flip( mu/(mu+lambda) )
    if ( extinction ) return false;           //Extinct. Remove branch.
    
    // Otherwise: Speciation; first draw values for daughter lineages and then recurse
    var multip1 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter1
    var multip2 = Math.exp(gaussian( {mu: logAlpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter2
    var lambda1 = lambda * multip1                                // Calculate new lambda for daughter1
    var lambda2 = lambda * multip2                                // Calculate new lambda for daughter2
        
    var leftTree  = clads1TreeSim( currentTime, lambda1, logAlpha, sigma, mu, rho, max_R-1, MAX_LAMBDA, MAX_NODES, MAX_DIV );       // Get back two Newick strings, partial trees
      // Check if the left Tree contains an error condition
      if (leftTree && checkError(leftTree)) {
        return leftTree; // return only left tree immediately
      }
    
    var rightTree = clads1TreeSim( currentTime, lambda2, logAlpha, sigma, mu, rho, max_R-1, MAX_LAMBDA, MAX_NODES, MAX_DIV );      // Get back two Newick strings, partial trees
    if (rightTree && checkError(rightTree)) {
      return rightTree
    } // also check right tree for error
    
    if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
        return false;
    }
    if (rightTree == false) {
        var newBranch = leftTree[1] + internalBranch;       // Add the two branches
        var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
        return NewickTree ;
    }
    if (leftTree  == false ) {
        var newBranch = rightTree[1] + internalBranch;      // Add the two branches
        var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
        return NewickTree ;
    } else {
        var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
        return NewickTree ;
    }
}
////////////////////////////////end library code////////////////////////////////////////////////////////////////////

clads1TreeSimulate(dirname)
