/**
 * Simulation from startTime to the present under CRBD, returns observed Tree (without extinctions)
 *
 * To run the simulation use:
 * npm run wppl tree_simulations/treesim-crbd.wppl NSIMS INFERENCE_DIR AGE RHO
 *
 *
 */

// Setting parameters/priors
var dirname = argv["_"][1] // dirname is now the directory where the sims are stored
                           // samples will be drawn from it
var age = argv["_"][2]     // simulation age
var rho = argv["_"][3]     // simulation rho

// Number of Taxa Globally (side-effect)
globalStore.n = 0;

/* Helper function to check for errors in the tree 
 * @param tree is a [String], i.e. tree
 * @return Boolean
 */
var checkError = function (tree) {
  var stringTree = tree.join("")
  if (stringTree.includes("ERROR")) {
    return true
  } else
    return false
}

/* Helper function to read in data */
var getHyperParamsFromDir = function(dirname) {
    var sample = phyjs.sample(dirname)
    return {
        startTime: age,
	lambda0: sample.lambda,
        mu: sample.mu,
	logAlpha: 0,
	sigma: 0,
	rho: rho,
	stepsize: 0,
	max_R: 500,
	MAX_LAMBDA: 1e12,
	MAX_NODES: 1e6,
        MAX_DIV: 1e12
    }
}

///////////////////////////////library code//////////////////////////////////////////////////////////////
/**
 * Wrapper to the simulation function
 * Checks for errors and assembles the tree
 * Re-starts simulation if either left or right tree fails
 */
var crbdTreeSimulate = function (dirname) {
    var obj = getHyperParamsFromDir(dirname)
    var startTime = obj.startTime
    var lambda0 = obj.lambda0
    var mu = obj.mu
    var rho = obj.rho
    var max_R = obj.max_R
    var MAX_LAMBDA = obj.MAX_LAMBDA
    var MAX_NODES = obj.MAX_NODES
  
      var TreeLeft = crbdTreeSim(startTime, lambda0, mu, rho, max_R, MAX_LAMBDA, MAX_NODES);
      if (TreeLeft == false )  {
        console.log("Error: No survivors in this subtree") 
        crbdTreeSimulate(dirname)
      }
      else{
        var stringTreeLeft = TreeLeft.join("")
        if ((stringTreeLeft.includes("ERROR_MAX")) || (stringTreeLeft.includes("ERROR_ZERO"))) {
          console.log("Error: Guards hit") 
          crbdTreeSimulate(dirname)
        }
        else{ //So first tree is ok
          var TreeRight = crbdTreeSim(startTime, lambda0, mu, rho, max_R, MAX_LAMBDA, MAX_NODES);
          if (TreeRight == false )  {
            console.log("Error: No survivors in this subtree") 
            crbdTreeSimulate(dirname)
          }
          else {
            var stringTreeRight = TreeRight.join("")
            if ((stringTreeRight.includes("ERROR_MAX")) || (stringTreeRight.includes("ERROR_ZERO"))) {
              console.log("Error: Guards hit") 
              crbdTreeSimulate(dirname)
            }
            else{ //So both the first and second tree is ok. Join trees and output:
              var stringTree = [TreeLeft.join('') + ',' + TreeRight.join('')];
              var Tree = "(" + stringTree + ")" + ';';
              //fs.write(filename, Tree);
              return Tree
            } 
          }
        }
      }
  }

var crbdTreeSim = function (startTime, lambda, mu, rho, max_R, MAX_LAMBDA, MAX_NODES) {
  // extreme values patch
  if (max_R == 0) {
    return ["ERROR_MAX_RECURSION:", startTime]
  }
  if (lambda > MAX_LAMBDA) {
    return ["ERROR_MAX_LAMBDA:", startTime]
  }
  if (lambda == 0.0) {
    return ["ERROR_ZERO:", startTime]
  }
  if (globalStore.n > MAX_NODES) {
    return ["ERROR_MAX_TAXA:", startTime]
  }
  //end extreme values patch


  var t = exponential({
    a: lambda + mu
  }); //Draw a waiting time
  var currentTime = startTime - t; //Calculate time of event
  if (currentTime < 0) { // If we have reached the present
    globalStore.n = globalStore.n + 1; // Needed for the node
    if (flip(rho)) {
      var Label = "Taxon_" + globalStore.n + ':';
      var NewickTree = [Label, startTime]; // Make start on tree
      return NewickTree;
    } else {
      return false; //Survived to present, but not sampled. Remove branch.
    }
  } else { // Otherwise we have an event
    var internalBranch = startTime - currentTime; // Calculate length of internal branch leading up to event
    var speciation = flip(lambda / (lambda + mu)); // Speciation or extinction?
    if (speciation == true) { // Speciation event
      var leftTree = crbdTreeSim(currentTime, lambda, mu, rho, max_R - 1, MAX_LAMBDA, MAX_NODES); // Get back two Newick strings, partial trees
      // Check if the left Tree contains an error condition
      if (leftTree && checkError(leftTree)) {
        return leftTree; // return only left tree immediately
      }
      var rightTree = crbdTreeSim(currentTime, lambda, mu, rho, max_R - 1, MAX_LAMBDA, MAX_NODES); // Get back two Newick strings, partial trees
      if (rightTree && checkError(rightTree)) {
        return rightTree
      } // also check right tree for error
      if (leftTree == false && rightTree == false) { // Both sides are extinct
        return false;
      }
      if (rightTree == false) {
        var newBranch = leftTree[1] + internalBranch; // Add the two branches
        var NewickTree = [leftTree[0], newBranch]; //build correct tree without the extinct side
        return NewickTree;
      }
      if (leftTree == false) {
        var newBranch = rightTree[1] + internalBranch; // Add the two branches
        var NewickTree = [rightTree[0], newBranch]; //build correct tree without the extinct side
        return NewickTree;
      } else {
        var NewickTree = ['(' + leftTree.join('') + ',' + rightTree.join('') + ')' + ':', internalBranch]; // Merge trees
        return NewickTree;
      }
    } else { // Extinction event
      return false;
    }
  }
}
////////////////////////////////end library code////////////////////////////////////////////////////////////////////

crbdTreeSimulate(dirname)
